#!/usr/bin/python3

from kinparse import parse_netlist

nlst = parse_netlist('Test/Test.net')

for component in nlst.components:
    print('%s  %s  %s' %(component.ref.val, component.part.val, component.value.val,))

for net in nlst.nets:
    nodes = []
    for node in net.nodes:
        nodes.append(node.ref.val)
#        print("%s" % (node.ref.val,))
    print(net.name.val)
    for node in nodes:
        print("\t%s" % (node,))

output_file = open("/home/john/Private/es/programming/mcp/CinnamonBun/Firmware/CAN_Node.X/src/application/Controller/controller.c","w")

output_file.write('/*\n')
output_file.write(' * file controller.c\n')
output_file.write(' *\n')
output_file.write(' * This file is auto generated by parsing kicad netlist!\n')
output_file.write(' */\n')
output_file.write('#include "libesoup_config.h"\n')

output_file.write('#ifdef SYS_SERIAL_LOGGING\n')
output_file.write('#define DEBUG_FILE\n')
output_file.write('static const char *TAG = "Master";\n')
output_file.write('#include "libesoup/logger/serial_log.h"\n')
output_file.write('#endif\n')
output_file.write('#include "libesoup/errno.h"\n')
output_file.write('#include "libesoup/gpio/gpio.h"\n')
output_file.write('#include "libesoup/comms/can/can.h"\n')
output_file.write('#include "libesoup/comms/can/es_control/es_control.h"\n')
output_file.write('#include "libesoup/status/status.h"\n')
output_file.write('#include "libesoup/timers/sw_timers.h"\n')
output_file.write('#include "controller.h"\n')
output_file.write('\n')

output_file.write('#define NUM_NET_NODES %d\n' % (len(nlst.components),))
output_file.write('\n')

output_file.write('/*\n')
output_file.write(' * static frames for load and transmission\n')
output_file.write(' *\n')
output_file.write(' */\n')
output_file.write('static can_frame b431_out_frame = {.can_id = ESC_BOOL_431_OUTPUT, .can_dlc = 0};\n')
output_file.write('static uint8_t   node_address;\n')
output_file.write('static struct net_node nnodes[NUM_NET_NODES];\n')

output_file.write('\n')

output_file.write('struct net_node *find_net_node(enum net_node_type type, uint8_t address) {\n')
output_file.write('\tuint16_t  loop;\n')
output_file.write('\n')
output_file.write('\tfor (loop = 0; loop < NUM_NET_NODES; loop++) {\n')
output_file.write('\t\tif ((nnodes[loop].type == type) && (nnodes[loop].address == address)) {\n')
output_file.write('\t\t\treturn(&nnodes[loop]);\n')
output_file.write('\t\t}\n')
output_file.write('\t}\n')
output_file.write('\treturn(NULL);\n')
output_file.write('}\n')
output_file.write('\n')

output_file.write('void process_bool431_input(can_frame *rx_frame)\n')
output_file.write('{\n')
output_file.write('\tuint8_t                loop;\n')
output_file.write('\tunion bool_431         es_bool_in;\n')
output_file.write('\tstruct net_node       *nnode;\n')
output_file.write('\n')
output_file.write('\tfor (loop = 0; loop < rx_frame->can_dlc; loop++) {\n')
output_file.write('\t\tes_bool_in.byte = rx_frame->data[loop];\n')
output_file.write('\t\tLOG_D("Input 0x%x:0x%x:0x%x\\n\\r", es_bool_in.bitfield.node, es_bool_in.bitfield.chan, es_bool_in.bitfield.es_bool);\n')
output_file.write('\n')
output_file.write('\t\tnnode = find_net_node(b431_in, es_bool_in.byte & 0xfe);\n')
output_file.write('\t\tif (nnode) {\n')

output_file.write('\t\t\t/*\n')
output_file.write('\t\t\t * Update the node\'s current status\n')
output_file.write('\t\t\t */\n')
output_file.write('\t\t\tnnode->ndata.b431.bitfield.es_bool = es_bool_in.bitfield.es_bool;\n')

output_file.write('\t\t}\n')
output_file.write('\t}\n')
output_file.write('\n')
output_file.write('}\n')
output_file.write('\n')

output_file.write('result_t app_init(uint8_t address, status_handler_t handler)\n')
output_file.write('{\n')
output_file.write('\tcan_l2_target_t        target;\n')
output_file.write('\tunion es_control_id    es_ctrl_id;\n')
output_file.write('\n')
output_file.write('\tLOG_D("Master app_init(0x%x)\\n\\r", address);\n')
output_file.write('\tnode_address = address;\n')
output_file.write('\n')
output_file.write('\t/*\n')
output_file.write('\t * Register a CAN Frame handler for the Switch (43) Input frames\n')
output_file.write('\t */\n')
output_file.write('\tes_ctrl_id.word = 0;\n')
output_file.write('\tes_ctrl_id.fields.es_type = ESC_BOOL_431_INPUT;\n')
output_file.write('\ttarget.filter  = es_ctrl_id.word;\n')
output_file.write('\ttarget.mask    = ESC_TYPE_MASK;\n')
output_file.write('\ttarget.handler = process_bool431_input;\n')
output_file.write('\treturn(frame_dispatch_reg_handler(&target));\n')
output_file.write('}\n')
output_file.write('\n')

output_file.write('result_t app_main(void)\n')
output_file.write('{\n')
output_file.write('\treturn(0);\n')
output_file.write('}\n')
